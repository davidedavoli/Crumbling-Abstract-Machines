(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "crumbles.ma".
include "variable finite set.ma".

notation "[ term 19 v ‚Üê term 19 b ]" non associative with precedence 90 for @{ 'substitution $v $b }.
interpretation "Substitution" 'substitution v b =(subst v b).

(*notation "‚å© b break, e ‚å™" non associative with precedence 90 for @{ 'ccrumble $b $e }.
*)
interpretation "Crumble creation" 'pair b e =(CCrumble b e).

notation "ùõå x . y" right associative with precedence 40 for @{ 'lambda $x $y}.
interpretation "Abstraction" 'lambda x y = (lambda x y ).

notation "ŒΩ x" non associative with precedence 90 for @{ 'variable $x}.
interpretation "Variable contruction" 'variable x = (variable x).

notation "hvbox(c @ e)" with precedence 35 for @{ 'at $c $e }.
interpretation "@ operation" 'at c e =(at c e).

definition var_from_subst ‚âù  Œªx:Substitution.
 match x with
 [ subst y z ‚áí y
 ]
.

let rec has_member l e on l :=
 match l with
 [ nil ‚áí false
 | cons h t ‚áí if (veqb e h) then true else (has_member t e)
 ]
 .
 
let rec dom_list (e:Environment) on e ‚âù 
 match e with
 [ Epsilon ‚áí []
 | Cons e s ‚áí if (has_member (dom_list e) (var_from_subst s)) then (dom_list e) else (cons Variable (var_from_subst s) (dom_list e))
 ]
 .
 
let rec rem_from_list l v on l ‚âù
 match l with
 [ nil ‚áí nil Variable
 | cons h t ‚áí if (veqb h v) then (rem_from_list t v) else (cons Variable h (rem_from_list t v))
 ]
 .

let rec fv_crumble c on c ‚âù
 match c with
 [ CCrumble b e ‚áí ]
 
let rec fv_val x on x ‚âù
 match x with
 [ var v ‚áí cons Variable var v nil
 | lambda v c ‚áí rem_from_list fv_crumble c v
 ]
 . 

let rec fv_byte b on b ‚âù
 match b with
 [ CValue x ‚áí fv_val x
 | AppValue x y ‚áí elim_dup_var (concat (fv_val x) (fv_val y))
 ]
 .